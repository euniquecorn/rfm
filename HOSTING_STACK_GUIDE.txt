================================================================================
                    RFM SYSTEM - HOSTING STACK GUIDE
                    Render + Cloudinary + Clerk
================================================================================

Last Updated: October 17, 2025
Prepared for: RFM Team
Stack: Render (Hosting) + Cloudinary (Images) + Clerk (Authentication)

================================================================================
                         TABLE OF CONTENTS
================================================================================

1. Stack Architecture Overview
2. Render - Hosting Platform
3. Cloudinary - Image Storage & Processing
4. Clerk - Authentication & User Management
5. How They Work Together
6. Cost Breakdown
7. Pros & Cons
8. Monitoring Requirements
9. Next Steps

================================================================================
                    1. STACK ARCHITECTURE OVERVIEW
================================================================================

YOUR USERS
    |
    |
    v
+------------------+     +------------------+
|     RENDER       |     |      CLERK       |
|   (Hosting)      |     |   (Auth)         |
|                  |     |                  |
| +--------------+ |     | - Google Login   |
| |  Frontend    | |     | - Email/Password |
| |  (Angular)   | |     | - Sessions       |
| +--------------+ |     | - Security       |
|                  |     +------------------+
| +--------------+ |
| |   Backend    | |
| |  (Node.js)   | |
| +------+-------+ |
|        |         |
| +------v-------+ |
| |   MySQL      | |
| |  Database    | |
| +--------------+ |
+--------+---------+
         |
         v
+------------------+
|   CLOUDINARY     |
| (Image Storage)  |
|                  |
| - User Uploads   |
| - Canvas Images  |
| - Optimization   |
| - CDN Delivery   |
+------------------+


================================================================================
                    2. RENDER - HOSTING PLATFORM
================================================================================

ROLE:
-----
Hosts your ENTIRE application (frontend, backend, and database)

WHAT RENDER DOES:
-----------------

A) Web Services (Your Backend)
   - Hosts your Node.js/Express API
   - Automatically deploys from Git
   - Provides HTTPS certificates (SSL) automatically
   - Auto-restarts if it crashes
   - Environment variables management

B) Static Sites (Your Frontend)
   - Hosts your Angular build files
   - CDN included (fast worldwide)
   - Automatic builds on Git push
   - Custom domains supported

C) MySQL Database
   - Managed MySQL database
   - Automatic backups (paid plans)
   - Monitoring and logs
   - Direct connection via URL


PRICING:
--------

Web Services:
+------------+----------+----------------------------------------------+
| Plan       | Cost     | What You Get                                 |
+------------+----------+----------------------------------------------+
| Free       | $0       | - 750 hours/month                            |
|            |          | - Spins down after 15 min inactive           |
|            |          | - 512MB RAM                                  |
|            |          | - Shared CPU                                 |
|            |          | - Free SSL                                   |
+------------+----------+----------------------------------------------+
| Starter    | $7/month | - Always on                                  |
|            |          | - 512MB RAM                                  |
|            |          | - Better performance                         |
+------------+----------+----------------------------------------------+
| Pro        | $25/month| - 2GB RAM                                    |
|            |          | - Faster CPU                                 |
|            |          | - Autoscaling                                |
+------------+----------+----------------------------------------------+

Database Pricing:
+------------+----------+----------+
| Plan       | Cost     | Storage  |
+------------+----------+----------+
| Free       | $0       | None     |
| Starter    | $7/month | 1GB      |
| Standard   | $15/month| 10GB     |
| Pro        | $45/month| 100GB    |
+------------+----------+----------+


IMPORTANT LIMITATIONS:
----------------------

Free Tier:
[X] Spin down after 15 minutes of inactivity
    - First request after spin down takes 30-60 seconds
    - NOT good for production apps
[X] NO MySQL database on free tier
    - Need $7/month plan minimum for database
[X] Apps sleep between midnight-6am if on free tier
[✓] Good for testing and demos only

Paid Tier ($7/month):
[✓] Always on
[✓] MySQL database included (1GB)
[✓] Fast response times
[✓] Good for small production apps


KEY FEATURES:
-------------

[✓] Deploy from Git (GitHub, GitLab, Bitbucket)
    - Every time you push code to main branch
    - Render automatically builds and deploys

[✓] Easy Environment Variables
    - Set via dashboard or config file
    - Secure secrets management
    - Different configs for staging/production

[✓] Logs & Monitoring
    - Real-time logs
    - CPU/Memory usage graphs
    - Email alerts on crashes

[✓] Custom Domains
    - Free: your-app.onrender.com
    - Paid: www.yourcompany.com


WHAT YOU MUST KNOW:
-------------------

1. Free tier is NOT for production
   - Users will experience delays
   - Database requires paid plan

2. You need at least $7/month for a real app
   - Web Service: $7/month
   - MySQL Database: $7/month
   - TOTAL: $14/month minimum

3. Backups are manual on starter plan
   - Need Pro plan ($45/month) for automatic backups

4. Region selection matters
   - Choose closest to your users (Philippines: Singapore region)
   - Can't easily change later


================================================================================
                3. CLOUDINARY - IMAGE STORAGE & PROCESSING
================================================================================

ROLE:
-----
Stores and serves ALL your images (user uploads, canvas designs, product photos)

WHAT CLOUDINARY DOES:
----------------------

A) Image Storage
   - Upload images via API
   - Organized folders/tags
   - Version history
   - Image metadata

B) Image Transformation (POWERFUL!)
   
   Examples:
   
   Original image:
   https://res.cloudinary.com/your-cloud/image/upload/photo.jpg
   
   Resize to 300x300:
   https://res.cloudinary.com/your-cloud/image/upload/w_300,h_300/photo.jpg
   
   Optimize quality:
   https://res.cloudinary.com/your-cloud/image/upload/q_auto/photo.jpg
   
   Convert to WebP (smaller files):
   https://res.cloudinary.com/your-cloud/image/upload/f_webp/photo.jpg
   
   You can do:
   - Resize, crop, rotate
   - Add watermarks
   - Convert formats (PNG to WebP)
   - Compress/optimize
   - Add filters/effects
   - Generate thumbnails
   - ALL via URL parameters!

C) Content Delivery Network (CDN)
   - Images served from servers near users
   - Super fast loading
   - 90+ locations worldwide

D) Video Support
   - Upload and stream videos
   - Same transformations as images


PRICING:
--------

+------------+---------+---------+------------+------------------+-------------+
| Plan       | Cost    | Storage | Bandwidth  | Transformations  | Best For    |
+------------+---------+---------+------------+------------------+-------------+
| Free       | $0      | 25GB    | 25GB/month | 25 credits       | Testing,    |
|            |         |         |            | (25,000/month)   | small apps  |
+------------+---------+---------+------------+------------------+-------------+
| Plus       | $99/mo  | 100GB   | 100GB/mo   | 100 credits      | Growing     |
|            |         |         |            | (100,000/month)  | businesses  |
+------------+---------+---------+------------+------------------+-------------+
| Advanced   | $249/mo | 500GB   | 500GB/mo   | 250 credits      | Large       |
|            |         |         |            | (250,000/month)  | businesses  |
+------------+---------+---------+------------+------------------+-------------+

What's a "Credit"?
- Credits = transformations/API calls
- 1 credit = 1,000 transformations
- Free tier = 25,000 transformations/month
- Usually enough for small/medium apps


IMPORTANT LIMITATIONS:
----------------------

Free Tier:
[✓] 25GB storage (plenty for starting out)
[✓] 25GB bandwidth/month (can serve ~125,000 images)
[✓] All transformation features included
[!] If you exceed limits, images stop loading
[!] Need credit card for signup (but won't charge)

When You'd Need Paid:
- More than 25GB bandwidth/month
- More than 25,000 transformations/month
- Need advanced analytics
- Enterprise support


KEY FEATURES:
-------------

1. Upload Widget (EASY!)
   Pre-built upload button for your app:
   
   cloudinary.createUploadWidget({
     cloudName: 'your-cloud',
     uploadPreset: 'your-preset'
   }, (error, result) => {
     console.log(result.info.secure_url); // Image URL
   });

2. Auto-Optimization
   Cloudinary automatically:
   - Chooses best format (WebP, AVIF)
   - Compresses without quality loss
   - Serves from nearest CDN location

3. Backup & Versioning
   - Keeps previous versions of images
   - Can restore deleted images (within limits)

4. Security
   - Signed URLs (prevent unauthorized access)
   - Folder-level permissions
   - HTTPS by default


WHAT YOU MUST KNOW:
-------------------

1. Bandwidth can run out fast
   - 25GB = ~125,000 image views
   - One viral post could exceed limits
   - Monitor usage in dashboard

2. Delete unused images
   - Storage quota fills up
   - Old/test images count toward limit

3. Use transformations wisely
   - Each unique URL counts as a transformation
   - Cache transformed images
   - Don't generate unlimited variations

4. Setup upload presets
   - Unsigned presets for public uploads
   - Signed uploads for authenticated users
   - Set max file size limits

5. Storage is forever (until you delete)
   - Deleted images still count toward storage for 30 days
   - Need to "permanently delete" to free space


================================================================================
                4. CLERK - AUTHENTICATION & USER MANAGEMENT
================================================================================

ROLE:
-----
Handles ALL user authentication (login, signup, sessions, security)

WHAT CLERK DOES:
----------------

A) Authentication Methods
   [✓] Email + Password
   [✓] Google OAuth (YOUR REQUEST!)
   [✓] Magic Links (passwordless email)
   [✓] Phone/SMS
   [✓] Apple, Facebook, Twitter, GitHub, etc.

B) Pre-Built UI Components
   Complete login/signup forms:
   
   <clerk-sign-in />
   <clerk-sign-up />
   <clerk-user-button />  <!-- Profile dropdown -->
   
   You get:
   - Beautiful, responsive forms
   - Customizable colors/logos
   - Mobile-optimized
   - Accessibility built-in
   - Multi-language support

C) Session Management
   - Secure tokens (JWT)
   - Automatic refresh
   - Cross-device sessions
   - Session activity logs
   - Force logout capabilities

D) User Management Dashboard
   - View all users
   - Ban/unban users
   - View login history
   - Manage roles/permissions
   - Export user data

E) Security Features
   - Password strength requirements
   - Rate limiting (prevent brute force)
   - Email verification
   - Two-factor authentication (2FA)
   - Device detection
   - Suspicious login alerts


PRICING:
--------

+-------------+----------+----------------------+----------------------------+
| Plan        | Cost     | Monthly Active Users | Features                   |
+-------------+----------+----------------------+----------------------------+
| Free        | $0       | Up to 10,000         | - Unlimited logins         |
|             |          |                      | - All OAuth providers      |
|             |          |                      | - Pre-built UI             |
|             |          |                      | - Basic support            |
+-------------+----------+----------------------+----------------------------+
| Pro         | $25/month| Up to 10,000         | - Everything in Free       |
|             |          |                      | - Advanced features        |
|             |          |                      | - Priority support         |
+-------------+----------+----------------------+----------------------------+
| Enterprise  | Custom   | Unlimited            | - Custom everything        |
|             |          |                      | - Dedicated support        |
|             |          |                      | - SLA guarantees           |
+-------------+----------+----------------------+----------------------------+

What's a "Monthly Active User" (MAU)?
- User who logs in at least once that month
- User who signed up = 1 MAU
- Same user logging in 100 times = still 1 MAU
- 10,000 MAU is plenty for most apps

Overage Pricing:
- $0.02 per MAU over 10,000
- Example: 15,000 MAU = $25 + (5,000 x $0.02) = $125/month


IMPORTANT LIMITATIONS:
----------------------

Free Tier:
[✓] 10,000 MAU (very generous!)
[✓] All authentication methods included
[✓] Pre-built UI components
[✓] Google OAuth included
[!] Basic support only (community forum)
[!] Limited customization

When You'd Need Paid:
- More than 10,000 active users/month
- Need advanced role-based access control (RBAC)
- Want to remove "Powered by Clerk" branding
- Need enterprise SSO (SAML)


KEY FEATURES:
-------------

1. Organizations & Teams
   - Users can create organizations
   - Invite team members
   - Manage permissions
   - Perfect for B2B apps

2. Metadata Storage
   Store custom data with users:
   
   user.publicMetadata = {
     plan: 'premium',
     customerId: '123'
   };

3. Webhooks
   Get notified when:
   - User signs up
   - User updates profile
   - User deletes account
   - Session expires

4. Multi-Tenancy
   - Support multiple organizations
   - Isolated data per organization
   - Cross-organization user management

5. Clerk Dashboard
   - View all users
   - Search by email/name
   - See login analytics
   - Manage OAuth connections


WHAT YOU MUST KNOW:
-------------------

1. Monthly Active Users (MAU) count
   - Only users who LOGIN that month count
   - Dormant users don't count
   - Monitor usage in dashboard

2. You still need YOUR database
   - Clerk stores auth data only
   - You store app data (orders, designs, etc.)
   - Link via Clerk User ID

3. Webhooks are important
   - Use webhooks to sync Clerk users to your database
   - Example: User signs up → webhook → save to MySQL

4. Customization on free tier is limited
   - Can change colors/logo
   - Can't fully customize HTML/CSS
   - Need Pro for advanced customization

5. Google OAuth requires setup
   - Need to create Google Cloud Project
   - Get OAuth credentials
   - Configure in Clerk dashboard


================================================================================
                    5. HOW THEY WORK TOGETHER
================================================================================

USER JOURNEY EXAMPLE: User uploads a custom design
---------------------------------------------------

Step 1: User Authentication
    User clicks "Login with Google"
        |
        v
    Clerk handles Google OAuth
        |
        v
    Clerk returns user info to your app
        |
        v
    Your Angular App saves user ID to localStorage

Step 2: User creates and saves design
    User creates a design on canvas
        |
        v
    User clicks "Save Design"
        |
        v
    Your Angular App uploads image to Cloudinary
        |
        v
    Cloudinary returns image URL
        |
        v
    Your Angular App sends to Render backend:
        - User ID (from Clerk)
        - Image URL (from Cloudinary)
        - Canvas data
        |
        v
    Render Backend saves to MySQL:
        - designs table
        - Links to user via Clerk user ID

Step 3: User views their designs later
    User requests their designs
        |
        v
    Render Backend fetches from MySQL
        |
        v
    Returns image URLs (Cloudinary links)
        |
        v
    Browser loads images from Cloudinary CDN
        |
        v
    Super fast! (served from nearest location)


DATA FLOW:
----------

+----------------+
|     CLERK      |  Stores: Email, name, Google ID, sessions
+----------------+

+----------------+
|    RENDER      |  Stores: Canvas data, orders, user preferences,
|   (MySQL)      |          product info. Links to Clerk via user_id
+----------------+

+----------------+
|  CLOUDINARY    |  Stores: Images, designs, product photos
+----------------+           Links via URLs stored in MySQL


EXAMPLE DATABASE SCHEMA:
-------------------------

Users table (MySQL on Render):
+------------+--------------+-------------------+
| id         | clerk_user_id| email            |
+------------+--------------+-------------------+
| 1          | user_abc123  | john@gmail.com   |
+------------+--------------+-------------------+

Designs table (MySQL on Render):
+----+---------+-------------+------------------------------------------------+
| id | user_id | name        | image_url (Cloudinary)                         |
+----+---------+-------------+------------------------------------------------+
| 1  | 1       | My Design   | https://res.cloudinary.com/rfm/image/design1   |
+----+---------+-------------+------------------------------------------------+


================================================================================
                        6. COST BREAKDOWN
================================================================================

FREE TIER (Testing Only):
-------------------------
Render Web Service:        $0  (spins down after 15 min, NOT production-ready)
Render Database:           $0  (NOT available on free tier)
Cloudinary:                $0  (25GB storage, 25GB bandwidth)
Clerk:                     $0  (10,000 users)
                          ----
Total:                     $0  BUT NOT PRODUCTION-READY


MINIMAL PRODUCTION (RECOMMENDED START):
---------------------------------------
Render Web Service:        $7/month   (backend, always on)
Render Database:           $7/month   (MySQL 1GB)
Cloudinary:                $0         (free tier sufficient for start)
Clerk:                     $0         (free tier sufficient for start)
                          ----------
Total:                    $14/month   ⭐ RECOMMENDED FOR PRODUCTION


GROWING BUSINESS:
-----------------
Render Web Service:       $25/month   (better performance, 2GB RAM)
Render Database:          $15/month   (10GB storage)
Cloudinary:            $0-99/month    (depends on traffic)
Clerk:                 $0-25/month    (depends on active users)
                      --------------
Total:                $40-164/month


COST OPTIMIZATION TIPS:
-----------------------
1. Start with $14/month plan
2. Monitor Cloudinary bandwidth (free tier often enough)
3. Only upgrade when you actually hit limits
4. Use Cloudinary transformations to reduce file sizes
5. Implement image caching on frontend
6. Delete unused images from Cloudinary regularly


================================================================================
                        7. PROS & CONS
================================================================================

PROS OF THIS STACK:
-------------------
[✓] Simple to set up (compared to AWS/GCP)
[✓] Predictable pricing (no surprise bills)
[✓] Scales well (can handle thousands of users)
[✓] Modern (used by many successful startups)
[✓] Good free tiers (excellent for development/testing)
[✓] Great documentation (all three services)
[✓] One platform per concern (easier to debug)
[✓] Can switch components (not completely locked in)
[✓] Professional infrastructure without DevOps complexity
[✓] Automatic SSL/HTTPS
[✓] Built-in CDN for images
[✓] Excellent developer experience


CONS OF THIS STACK:
-------------------
[X] Multiple platforms to manage (3 different dashboards)
[X] No free production-ready option ($14/month minimum)
[X] Bandwidth limits (Cloudinary free tier can run out)
[X] Cold starts on free tier (Render)
[X] Less powerful than GCP/AWS (for massive scale)
[X] Vendor lock-in per service (but migrations possible)
[X] Need to monitor multiple usage metrics
[X] Learning curve for three platforms
[X] Support is limited on free tiers


COMPARISON TO ALTERNATIVES:
---------------------------

vs. Google Cloud Platform (GCP):
    This Stack: Easier, cheaper for small apps
    GCP: More powerful, complex, expensive

vs. AWS:
    This Stack: Much simpler, better for small teams
    AWS: More services, steeper learning curve

vs. All-in-One (Supabase):
    This Stack: Better image handling (Cloudinary)
    Supabase: Simpler (fewer platforms)

vs. Firebase:
    This Stack: Better for custom backend logic
    Firebase: Better for real-time features


================================================================================
                    8. MONITORING REQUIREMENTS
================================================================================

WHAT YOU MUST MONITOR:
----------------------

1. RENDER USAGE:
   Dashboard: dashboard.render.com
   
   Monitor:
   - CPU usage (if consistently high, upgrade plan)
   - Memory usage (if hitting limits, upgrade RAM)
   - Database storage (1GB fills up quickly)
   - Request response times (should be <500ms)
   - Error logs (check daily)
   
   Action Triggers:
   - CPU >80% for 24 hours → Upgrade to $25/month plan
   - Database >800MB → Clean old data or upgrade to $15/month
   - Response time >1 second → Investigate or upgrade

2. CLOUDINARY USAGE:
   Dashboard: cloudinary.com/console
   
   Monitor:
   - Storage used / 25GB
   - Bandwidth used / 25GB per month
   - Transformations used / 25,000 per month
   - Credits used / 25 credits
   
   Action Triggers:
   - Storage >20GB → Delete unused images
   - Bandwidth >20GB/month → Optimize images or upgrade
   - Transformations >20,000/month → Review transformation usage
   
   Best Practices:
   - Delete test images regularly
   - Use consistent transformation parameters
   - Implement client-side caching
   - Compress images before upload when possible

3. CLERK USAGE:
   Dashboard: dashboard.clerk.com
   
   Monitor:
   - Monthly Active Users (MAU) / 10,000
   - New signups per day
   - Failed login attempts (security)
   - Authentication errors
   
   Action Triggers:
   - MAU >8,000 → Prepare for upgrade or optimize
   - High failed login attempts → Security issue
   
   Best Practices:
   - Review user analytics monthly
   - Clean up test/spam accounts
   - Monitor for suspicious activity


RECOMMENDED MONITORING SCHEDULE:
--------------------------------
Daily:   - Check Render error logs
         - Check critical errors on all platforms

Weekly:  - Review Cloudinary bandwidth usage
         - Check Clerk active user count
         - Review app performance metrics

Monthly: - Full review of all usage metrics
         - Cost analysis
         - Capacity planning
         - Clean up unused resources


ALERT SETUP:
------------
Set up email alerts for:
- Render: CPU >90%, Memory >90%, Service down
- Cloudinary: Bandwidth >80% of limit
- Clerk: Unusual login patterns


================================================================================
                        9. NEXT STEPS
================================================================================

IMPLEMENTATION PHASES:
----------------------

PHASE 1: SETUP ACCOUNTS (30 minutes)
    [_] Sign up for Render (render.com)
    [_] Sign up for Cloudinary (cloudinary.com)
    [_] Sign up for Clerk (clerk.com)
    [_] Verify email addresses
    [_] Add credit cards (Cloudinary requires it even for free tier)

PHASE 2: CLOUDINARY INTEGRATION (1-2 hours)
    [_] Install Cloudinary SDK in Angular project
    [_] Create upload preset in Cloudinary dashboard
    [_] Add image upload functionality to canvas
    [_] Test image upload and retrieval
    [_] Update database schema to store image URLs
    [_] Replace current image storage with Cloudinary URLs

PHASE 3: CLERK AUTHENTICATION (2-3 hours)
    [_] Install Clerk Angular SDK
    [_] Configure Clerk in Angular app
    [_] Create Google Cloud OAuth credentials
    [_] Configure Google OAuth in Clerk dashboard
    [_] Replace current login/signup forms with Clerk components
    [_] Update database to use Clerk user IDs
    [_] Set up Clerk webhooks for user sync
    [_] Test Google login flow
    [_] Test email/password login flow

PHASE 4: RENDER DEPLOYMENT (2-3 hours)
    [_] Create render.yaml configuration file
    [_] Set up Render web service for backend
    [_] Set up Render static site for frontend
    [_] Set up Render MySQL database
    [_] Configure environment variables
    [_] Connect GitHub repository
    [_] Deploy backend
    [_] Deploy frontend
    [_] Test production deployment
    [_] Configure custom domain (optional)

PHASE 5: TESTING & OPTIMIZATION (1-2 hours)
    [_] End-to-end testing of all features
    [_] Performance testing
    [_] Load testing (basic)
    [_] Security review
    [_] Set up monitoring alerts
    [_] Document deployment process
    [_] Create rollback plan


IMMEDIATE NEXT STEPS:
---------------------
1. Review this document with team
2. Decide on budget approval ($14/month minimum)
3. Assign team members to each phase
4. Schedule implementation timeline
5. Create backup of current system before migration


DECISION CHECKLIST:
-------------------
Before proceeding, ensure:
[_] Team understands the costs ($14/month minimum)
[_] Team is comfortable managing 3 platforms
[_] Budget is approved
[_] Timeline is acceptable (1-2 weeks for full implementation)
[_] Team has reviewed alternatives
[_] Backup strategy is in place


RESOURCES & DOCUMENTATION:
--------------------------
Render:      https://render.com/docs
Cloudinary:  https://cloudinary.com/documentation
Clerk:       https://clerk.com/docs

Community Support:
Render:      https://community.render.com
Cloudinary:  https://support.cloudinary.com
Clerk:       https://clerk.com/support


CONTACT FOR QUESTIONS:
----------------------
Render Support:      support@render.com
Cloudinary Support:  support@cloudinary.com
Clerk Support:       support@clerk.com


================================================================================
                            APPENDIX
================================================================================

GLOSSARY:
---------
MAU     = Monthly Active Users
CDN     = Content Delivery Network
OAuth   = Open Authorization (for Google login)
JWT     = JSON Web Token (for sessions)
SSL     = Secure Sockets Layer (HTTPS)
API     = Application Programming Interface
RAM     = Random Access Memory
CPU     = Central Processing Unit

COMMON QUESTIONS:
-----------------

Q: Can we start with free tier?
A: Yes for testing, but you need $14/month for production (no database on 
   free tier).

Q: What happens if we exceed Cloudinary free tier?
A: Images will stop loading. You'll need to upgrade or delete unused images.

Q: Can we switch from Clerk to another auth provider later?
A: Yes, but it requires code changes. Clerk is not vendor-locked.

Q: Is $14/month enough for launch?
A: Yes, sufficient for 100-500 active users with moderate usage.

Q: What if the app gets popular suddenly?
A: All three services scale automatically. You just pay more. No downtime.

Q: Do we need separate staging and production?
A: Recommended. Render allows multiple environments. Total: ~$28/month.

Q: Can we use our own domain?
A: Yes, all three services support custom domains.

Q: Is the data secure?
A: Yes, all three services are SOC 2 compliant and use encryption.


================================================================================
                            END OF DOCUMENT
================================================================================

Document Version: 1.0
Last Updated: October 17, 2025
Prepared by: AI Development Assistant for RFM Team

For questions or clarifications, please refer to the official documentation
of each service or contact their support teams.

NEXT STEPS: Review with team and begin Phase 1 (Setup Accounts)

================================================================================

